buildscript {
    ext {
        springBootVersion = '2.0.1.RELEASE'
        swingheilVersion = '0.1.1.RELEASE'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.franzbecker:gradle-lombok:1.8")
        classpath('com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7')
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'io.franzbecker.gradle-lombok'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'


group 'pro.tompark.swingheil'
version "${swingheilVersion}"
sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile("javax.inject:javax.inject:1")
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')

    // for logging sql query
    compile("org.bgee.log4jdbc-log4j2:log4jdbc-log4j2-jdbc4.1:1.16")

    // for QueryDSL
    compile('com.querydsl:querydsl-jpa')
    compile('com.querydsl:querydsl-core')
    compile('com.querydsl:querydsl-apt')

    // for DB connection
    compile('mysql:mysql-connector-java')
    runtime("com.h2database:h2")

    // for JUnit Test
    compileOnly('org.projectlombok:lombok')
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

/**** QueryDSL Class Generate Script ****/
def queryDslOutput = file("src/main/genq")
sourceSets {
    main {
        java {
            srcDir queryDslOutput
        }
    }
}

task generateQueryDSL(type: JavaCompile, group: 'build') {
    source = sourceSets.main.java
    classpath = configurations.compile
    destinationDir = queryDslOutput
    options.compilerArgs = [
            "-proc:only",
            "-processor", 'com.querydsl.apt.jpa.JPAAnnotationProcessor,lombok.launch.AnnotationProcessorHider$AnnotationProcessor'
    ]
}
compileJava.dependsOn(generateQueryDSL)

clean {
    delete queryDslOutput
}

// enable jar for publishing normal jar
bootJar.enabled = false
jar.enabled = true

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId 'pro.tompark.swingheil'
            artifactId 'swingheil-service'
            version "${swingheilVersion}"
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
    publications = ['MyPublication']
    configurations = ['archives']
    publish = true
    dryRun = false
    pkg {
        repo = 'swingheil-utils'
        name = 'swingheil-service'
        userOrg = 'tomparkpro'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/tomparkpro/swingheil-service.git'
        version {
            name = "${swingheilVersion}"
            desc = "Swing Heil Service ${swingheilVersion}"
            vcsTag = "${swingheilVersion}"
        }
    }
}
